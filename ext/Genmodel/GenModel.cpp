/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GenModel swig_types[0]
#define SWIGTYPE_p_GenModelCplex swig_types[1]
#define SWIGTYPE_p_GenModelOsi swig_types[2]
#define SWIGTYPE_p_InterfaceVectorT_double_t swig_types[3]
#define SWIGTYPE_p_InterfaceVectorT_int_t swig_types[4]
#define SWIGTYPE_p_InterfaceVectorT_long_t swig_types[5]
#define SWIGTYPE_p_ModVars swig_types[6]
#define SWIGTYPE_p_char swig_types[7]
#define SWIGTYPE_p_double swig_types[8]
#define SWIGTYPE_p_genmodel_param swig_types[9]
#define SWIGTYPE_p_int swig_types[10]
#define SWIGTYPE_p_long swig_types[11]
#define SWIGTYPE_p_mapT_string_bool_t swig_types[12]
#define SWIGTYPE_p_mapT_string_double_t swig_types[13]
#define SWIGTYPE_p_mapT_string_long_t swig_types[14]
#define SWIGTYPE_p_mapT_string_string_t swig_types[15]
#define SWIGTYPE_p_string swig_types[16]
#define SWIGTYPE_p_vectorT_ModConsts_t swig_types[17]
#define SWIGTYPE_p_vectorT_double_t swig_types[18]
#define SWIGTYPE_p_vectorT_int_t swig_types[19]
#define SWIGTYPE_p_void swig_types[20]
static swig_type_info *swig_types[22];
static swig_module_info swig_module = {swig_types, 21, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_Genmodel
#define SWIG_name    "Genmodel"

static VALUE mGenmodel;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


    #include "InterfaceObject.h"
    #include "GenModel.h"
    #include "GenModelCplex.h"
    #include "GenModelOsi.h"


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/local/Cellar/swig/2.0.11/share/swig/2.0.11/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


/*@SWIG:/usr/local/Cellar/swig/2.0.11/share/swig/2.0.11/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(VALUE obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (VALUE obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/local/Cellar/swig/2.0.11/share/swig/2.0.11/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}

static swig_class SwigClassIntVector;

SWIGINTERN VALUE
_wrap_new_IntVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< int > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (InterfaceVector< int > *)new InterfaceVector< int >();
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IntVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IntVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_InterfaceVectorT_int_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IntVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  InterfaceVector< int > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","InterfaceVector<(int)>", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (InterfaceVector< int > *)new InterfaceVector< int >(arg1);
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_IntVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "IntVector.new", 
    "    IntVector.new()\n"
    "    IntVector.new(int size)\n");
  
  return Qnil;
}


SWIGINTERN void
free_InterfaceVector_Sl_int_Sg_(InterfaceVector< int > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_IntVector_SetSize(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< int > *arg1 = (InterfaceVector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< int > *","SetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetSize", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetSize(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_Delete(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< int > *arg1 = (InterfaceVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< int > *","Delete", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< int > * >(argp1);
  {
    try {
      (arg1)->Delete(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_Set(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< int > *arg1 = (InterfaceVector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< int > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Set(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_Get(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< int > *arg1 = (InterfaceVector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< int > *","Get", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Get", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->Get(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IntVector_Ptr(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< int > *arg1 = (InterfaceVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< int > *","Ptr", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< int > * >(argp1);
  {
    try {
      result = (int *)(arg1)->Ptr(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassLongVector;

SWIGINTERN VALUE
_wrap_new_LongVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< long > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (InterfaceVector< long > *)new InterfaceVector< long >();
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LongVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LongVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_InterfaceVectorT_long_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LongVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  InterfaceVector< long > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","InterfaceVector<(long)>", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (InterfaceVector< long > *)new InterfaceVector< long >(arg1);
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LongVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_LongVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LongVector__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "LongVector.new", 
    "    LongVector.new()\n"
    "    LongVector.new(int size)\n");
  
  return Qnil;
}


SWIGINTERN void
free_InterfaceVector_Sl_long_Sg_(InterfaceVector< long > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LongVector_SetSize(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< long > *arg1 = (InterfaceVector< long > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< long > *","SetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< long > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetSize", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetSize(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LongVector_Delete(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< long > *arg1 = (InterfaceVector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< long > *","Delete", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< long > * >(argp1);
  {
    try {
      (arg1)->Delete(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LongVector_Set(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< long > *arg1 = (InterfaceVector< long > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< long > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< long > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (arg1)->Set(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LongVector_Get(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< long > *arg1 = (InterfaceVector< long > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< long > *","Get", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< long > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Get", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(arg1)->Get(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LongVector_Ptr(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< long > *arg1 = (InterfaceVector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< long > *","Ptr", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< long > * >(argp1);
  {
    try {
      result = (long *)(arg1)->Ptr(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassDoubleVector;

SWIGINTERN VALUE
_wrap_new_DoubleVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (InterfaceVector< double > *)new InterfaceVector< double >();
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_DoubleVector_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_DoubleVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_InterfaceVectorT_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_DoubleVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  InterfaceVector< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","InterfaceVector<(double)>", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (InterfaceVector< double > *)new InterfaceVector< double >(arg1);
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_DoubleVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "DoubleVector.new", 
    "    DoubleVector.new()\n"
    "    DoubleVector.new(int size)\n");
  
  return Qnil;
}


SWIGINTERN void
free_InterfaceVector_Sl_double_Sg_(InterfaceVector< double > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_DoubleVector_SetSize(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< double > *arg1 = (InterfaceVector< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< double > *","SetSize", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetSize", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetSize(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_Delete(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< double > *arg1 = (InterfaceVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< double > *","Delete", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< double > * >(argp1);
  {
    try {
      (arg1)->Delete(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_Set(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< double > *arg1 = (InterfaceVector< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< double > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->Set(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_Get(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< double > *arg1 = (InterfaceVector< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< double > *","Get", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Get", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->Get(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DoubleVector_Ptr(int argc, VALUE *argv, VALUE self) {
  InterfaceVector< double > *arg1 = (InterfaceVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_InterfaceVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "InterfaceVector< double > *","Ptr", 1, self )); 
  }
  arg1 = reinterpret_cast< InterfaceVector< double > * >(argp1);
  {
    try {
      result = (double *)(arg1)->Ptr(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassGenModel;

SWIGINTERN void
free_GenModel(GenModel *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_GenModel_AddIndexToCoef(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddIndexToCoef", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","AddIndexToCoef", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddIndexToCoef", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "string","AddIndexToCoef", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddIndexToCoef", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< string * >(argp3));
    }
  }
  {
    try {
      result = (long)(arg1)->AddIndexToCoef(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddCoef(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddCoef", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","AddCoef", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddCoef", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->AddCoef(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_CoefIndex(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  int arg3 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","CoefIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","CoefIndex", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CoefIndex", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CoefIndex", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (long)(arg1)->CoefIndex(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddConst__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddConst", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","AddConst", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddConst", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->AddConst(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddConst__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  double arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddConst", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","AddConst", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddConst", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","AddConst", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "char","AddConst", 4, argv[2] ));
  } 
  arg4 = static_cast< char >(val4);
  {
    try {
      result = (long)(arg1)->AddConst(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModel_AddConst(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GenModel_AddConst__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GenModel_AddConst__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "GenModel.AddConst", 
    "    long GenModel.AddConst(string cname)\n"
    "    long GenModel.AddConst(string cname, double rhs, char sense)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddVar(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  char arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  char val6 ;
  int ecode6 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddVar", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","AddVar", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddVar", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","AddVar", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddVar", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddVar", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_char(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "char","AddVar", 6, argv[4] ));
  } 
  arg6 = static_cast< char >(val6);
  {
    try {
      result = (long)(arg1)->AddVar(arg2,arg3,arg4,arg5,arg6); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddVars(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  long arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  char arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  char val7 ;
  int ecode7 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddVars", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","AddVars", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddVars", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","AddVars", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddVars", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddVars", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddVars", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_char(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "char","AddVars", 7, argv[5] ));
  } 
  arg7 = static_cast< char >(val7);
  {
    try {
      result = (long)(arg1)->AddVars(arg2,arg3,arg4,arg5,arg6,arg7); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddModelCol__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  string arg7 ;
  char arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  char val8 ;
  int ecode8 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddModelCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddModelCol", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddModelCol", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddModelCol", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddModelCol", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddModelCol", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddModelCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddModelCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  {
    res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "string","AddModelCol", 7, argv[5] )); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddModelCol", 7, argv[5]));
    } else {
      arg7 = *(reinterpret_cast< string * >(argp7));
    }
  }
  ecode8 = SWIG_AsVal_char(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "char","AddModelCol", 8, argv[6] ));
  } 
  arg8 = static_cast< char >(val8);
  {
    try {
      result = (long)(arg1)->AddModelCol(*arg2,*arg3,arg4,arg5,arg6,arg7,arg8); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddModelCol__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  string arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddModelCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddModelCol", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddModelCol", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddModelCol", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddModelCol", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddModelCol", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddModelCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddModelCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  {
    res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "string","AddModelCol", 7, argv[5] )); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddModelCol", 7, argv[5]));
    } else {
      arg7 = *(reinterpret_cast< string * >(argp7));
    }
  }
  {
    try {
      result = (long)(arg1)->AddModelCol(*arg2,*arg3,arg4,arg5,arg6,arg7); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModel_AddModelCol(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_vectorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_string, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_GenModel_AddModelCol__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_vectorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_string, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_GenModel_AddModelCol__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "GenModel.AddModelCol", 
    "    long GenModel.AddModelCol(vector< int > &ind, vector< double > &val, double obj, double lb, double ub, string name, char type)\n"
    "    long GenModel.AddModelCol(vector< int > &ind, vector< double > &val, double obj, double lb, double ub, string name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddModelRow(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  char arg5 ;
  string arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddModelRow", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddModelRow", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddModelRow", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddModelRow", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddModelRow", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddModelRow", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "char","AddModelRow", 5, argv[3] ));
  } 
  arg5 = static_cast< char >(val5);
  {
    res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "string","AddModelRow", 6, argv[4] )); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddModelRow", 6, argv[4]));
    } else {
      arg6 = *(reinterpret_cast< string * >(argp6));
    }
  }
  {
    try {
      result = (long)(arg1)->AddModelRow(*arg2,*arg3,arg4,arg5,arg6); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_SetQpCoef(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","SetQpCoef", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","SetQpCoef", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SetQpCoef", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","SetQpCoef", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (long)(arg1)->SetQpCoef(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddNz(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddNz", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","AddNz", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","AddNz", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddNz", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (long)(arg1)->AddNz(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_AddNzToLast(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  long arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","AddNzToLast", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","AddNzToLast", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","AddNzToLast", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (long)(arg1)->AddNzToLast(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_SetNumbers(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","SetNumbers", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->SetNumbers(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_ClearStructure(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","ClearStructure", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->ClearStructure(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_PrintSol__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","PrintSol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->PrintSol(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_PrintModel(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","PrintModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->PrintModel(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_PrintSol__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","PrintSol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","PrintSol", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","PrintSol", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->PrintSol(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModel_PrintSol(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GenModel_PrintSol__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GenModel_PrintSol__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "GenModel.PrintSol", 
    "    long GenModel.PrintSol()\n"
    "    long GenModel.PrintSol(string v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_PrintSolNz__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","PrintSolNz", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->PrintSolNz(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_PrintSolNz__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","PrintSolNz", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","PrintSolNz", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","PrintSolNz", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->PrintSolNz(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModel_PrintSolNz(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GenModel_PrintSolNz__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GenModel_PrintSolNz__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "GenModel.PrintSolNz", 
    "    long GenModel.PrintSolNz()\n"
    "    long GenModel.PrintSolNz(string v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_PrintObjVal(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","PrintObjVal", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->PrintObjVal(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_SetLongParam(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","SetLongParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetLongParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetLongParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","SetLongParam", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      result = (long)(arg1)->SetLongParam(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_SetDblParam(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","SetDblParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetDblParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetDblParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","SetDblParam", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (long)(arg1)->SetDblParam(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_SetBoolParam(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","SetBoolParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetBoolParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetBoolParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","SetBoolParam", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (long)(arg1)->SetBoolParam(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_SetStrParam(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","SetStrParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetStrParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetStrParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "string","SetStrParam", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetStrParam", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< string * >(argp3));
    }
  }
  {
    try {
      result = (long)(arg1)->SetStrParam(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_ThrowError(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","ThrowError", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","ThrowError", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","ThrowError", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->ThrowError(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_Init(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","Init", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","Init", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","Init", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->Init(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_CreateModel(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->CreateModel(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_Solve(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->Solve(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_SetSol(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","SetSol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->SetSol(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_ChangeBulkBounds(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *arg4 = (char *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","ChangeBulkBounds", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ChangeBulkBounds", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "int *","ChangeBulkBounds", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char *","ChangeBulkBounds", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "double *","ChangeBulkBounds", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (long)(arg1)->ChangeBulkBounds(arg2,arg3,arg4,arg5); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_WriteProblemToLpFile(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","WriteProblemToLpFile", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","WriteProblemToLpFile", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","WriteProblemToLpFile", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->WriteProblemToLpFile(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_WriteSolutionToFile(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","WriteSolutionToFile", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","WriteSolutionToFile", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","WriteSolutionToFile", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->WriteSolutionToFile(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_ChangeBulkObjectives(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","ChangeBulkObjectives", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ChangeBulkObjectives", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "int *","ChangeBulkObjectives", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "double *","ChangeBulkObjectives", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (long)(arg1)->ChangeBulkObjectives(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_DeleteMipStarts(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","DeleteMipStarts", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (long)(arg1)->DeleteMipStarts(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_GetMIPRelativeGap(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","GetMIPRelativeGap", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    try {
      result = (double)(arg1)->GetMIPRelativeGap(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_FindConstraintMaxLhs(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","FindConstraintMaxLhs", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","FindConstraintMaxLhs", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (double)(arg1)->FindConstraintMaxLhs(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_FindConstraintMinLhs(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","FindConstraintMinLhs", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","FindConstraintMinLhs", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (double)(arg1)->FindConstraintMinLhs(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_MakeConstraintFeasible(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","MakeConstraintFeasible", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","MakeConstraintFeasible", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (long)(arg1)->MakeConstraintFeasible(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_binit_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","binit", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","binit", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->binit = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_binit_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","binit", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (bool) ((arg1)->binit);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_bcreated_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","bcreated", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","bcreated", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->bcreated = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_bcreated_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","bcreated", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (bool) ((arg1)->bcreated);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_name_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","name", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","name", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","name", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  if (arg1) (arg1)->name = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_name_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","name", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->name);
  vresult = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_consts_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  vector< ModConsts > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","consts", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_ModConsts_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< ModConsts >","consts", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< ModConsts >","consts", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< vector< ModConsts > * >(argp2));
    }
  }
  if (arg1) (arg1)->consts = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_consts_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ModConsts > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","consts", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->consts);
  vresult = SWIG_NewPointerObj((new vector< ModConsts >(static_cast< const vector< ModConsts >& >(result))), SWIGTYPE_p_vectorT_ModConsts_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_ci_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  map< string,long > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","ci", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mapT_string_long_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "map< string,long >","ci", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "map< string,long >","ci", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< map< string,long > * >(argp2));
    }
  }
  if (arg1) (arg1)->ci = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_ci_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  map< string,long > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","ci", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->ci);
  vresult = SWIG_NewPointerObj((new map< string,long >(static_cast< const map< string,long >& >(result))), SWIGTYPE_p_mapT_string_long_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_nc_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","nc", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned long","nc", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->nc = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_nc_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","nc", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (unsigned long) ((arg1)->nc);
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_nr_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","nr", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned long","nr", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->nr = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_nr_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","nr", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (unsigned long) ((arg1)->nr);
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_nz_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","nz", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned long","nz", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->nz = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_nz_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","nz", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (unsigned long) ((arg1)->nz);
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_vars_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  ModVars arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","vars", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ModVars,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "ModVars","vars", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "ModVars","vars", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ModVars * >(argp2));
    }
  }
  if (arg1) (arg1)->vars = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_vars_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ModVars result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","vars", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->vars);
  vresult = SWIG_NewPointerObj((new ModVars(static_cast< const ModVars& >(result))), SWIGTYPE_p_ModVars, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_version_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","version", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","version", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  if (arg1) (arg1)->version = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_version_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->version);
  vresult = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_string, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_objval_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","objval", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","objval", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->objval = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_objval_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","objval", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (double) ((arg1)->objval);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_solstat_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","solstat", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","solstat", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->solstat = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_solstat_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","solstat", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (int) ((arg1)->solstat);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_feasible_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","feasible", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","feasible", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->feasible = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_feasible_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","feasible", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (bool) ((arg1)->feasible);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_dualfeasible_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","dualfeasible", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","dualfeasible", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->dualfeasible = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_dualfeasible_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","dualfeasible", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (bool) ((arg1)->dualfeasible);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_hassolution_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","hassolution", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","hassolution", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->hassolution = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_hassolution_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","hassolution", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (bool) ((arg1)->hassolution);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_solverdata_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","solverdata", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","solverdata", 2, argv[0] )); 
  }
  if (arg1) (arg1)->solverdata = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_solverdata_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","solverdata", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result = (void *) ((arg1)->solverdata);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_longParam_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  map< string,long > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","longParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mapT_string_long_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "map< string,long >","longParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "map< string,long >","longParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< map< string,long > * >(argp2));
    }
  }
  if (arg1) (arg1)->longParam = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_longParam_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  map< string,long > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","longParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->longParam);
  vresult = SWIG_NewPointerObj((new map< string,long >(static_cast< const map< string,long >& >(result))), SWIGTYPE_p_mapT_string_long_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_dblParam_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  map< string,double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","dblParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mapT_string_double_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "map< string,double >","dblParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "map< string,double >","dblParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< map< string,double > * >(argp2));
    }
  }
  if (arg1) (arg1)->dblParam = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_dblParam_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  map< string,double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","dblParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->dblParam);
  vresult = SWIG_NewPointerObj((new map< string,double >(static_cast< const map< string,double >& >(result))), SWIGTYPE_p_mapT_string_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_boolParam_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  map< string,bool > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","boolParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mapT_string_bool_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "map< string,bool >","boolParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "map< string,bool >","boolParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< map< string,bool > * >(argp2));
    }
  }
  if (arg1) (arg1)->boolParam = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_boolParam_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  map< string,bool > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","boolParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->boolParam);
  vresult = SWIG_NewPointerObj((new map< string,bool >(static_cast< const map< string,bool >& >(result))), SWIGTYPE_p_mapT_string_bool_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_strParam_set(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  map< string,string > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","strParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_mapT_string_string_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "map< string,string >","strParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "map< string,string >","strParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< map< string,string > * >(argp2));
    }
  }
  if (arg1) (arg1)->strParam = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModel_strParam_get(int argc, VALUE *argv, VALUE self) {
  GenModel *arg1 = (GenModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  map< string,string > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModel *","strParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModel * >(argp1);
  result =  ((arg1)->strParam);
  vresult = SWIG_NewPointerObj((new map< string,string >(static_cast< const map< string,string >& >(result))), SWIGTYPE_p_mapT_string_string_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassGenModelCplex;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_GenModelCplex_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_GenModelCplex_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GenModelCplex);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_GenModelCplex(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GenModelCplex *)new GenModelCplex();
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_GenModelCplex(GenModelCplex *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_GenModelCplex_Init(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","Init", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","Init", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","Init", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->Init(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_CreateModel__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  int arg3 ;
  string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","CreateModel", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CreateModel", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","CreateModel", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    try {
      result = (long)(arg1)->CreateModel(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_CreateModel__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","CreateModel", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CreateModel", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (long)(arg1)->CreateModel(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_CreateModel__SWIG_2(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","CreateModel", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->CreateModel(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_CreateModel__SWIG_3(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (long)(arg1)->CreateModel(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelCplex_CreateModel(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GenModelCplex_CreateModel__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GenModelCplex_CreateModel__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GenModelCplex_CreateModel__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_string, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GenModelCplex_CreateModel__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "GenModelCplex.CreateModel", 
    "    long GenModelCplex.CreateModel(string filename, int type, string dn)\n"
    "    long GenModelCplex.CreateModel(string filename, int type)\n"
    "    long GenModelCplex.CreateModel(string filename)\n"
    "    long GenModelCplex.CreateModel()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_AddSolverCol__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  string arg7 ;
  char arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  char val8 ;
  int ecode8 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","AddSolverCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddSolverCol", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddSolverCol", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddSolverCol", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddSolverCol", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddSolverCol", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddSolverCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddSolverCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  {
    res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "string","AddSolverCol", 7, argv[5] )); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddSolverCol", 7, argv[5]));
    } else {
      arg7 = *(reinterpret_cast< string * >(argp7));
    }
  }
  ecode8 = SWIG_AsVal_char(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "char","AddSolverCol", 8, argv[6] ));
  } 
  arg8 = static_cast< char >(val8);
  {
    try {
      result = (long)(arg1)->AddSolverCol(*arg2,*arg3,arg4,arg5,arg6,arg7,arg8); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_AddSolverCol__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  string arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","AddSolverCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddSolverCol", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddSolverCol", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddSolverCol", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddSolverCol", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddSolverCol", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddSolverCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddSolverCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  {
    res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "string","AddSolverCol", 7, argv[5] )); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddSolverCol", 7, argv[5]));
    } else {
      arg7 = *(reinterpret_cast< string * >(argp7));
    }
  }
  {
    try {
      result = (long)(arg1)->AddSolverCol(*arg2,*arg3,arg4,arg5,arg6,arg7); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelCplex_AddSolverCol(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_vectorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_string, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_GenModelCplex_AddSolverCol__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_vectorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_string, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_GenModelCplex_AddSolverCol__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "GenModelCplex.AddSolverCol", 
    "    long GenModelCplex.AddSolverCol(vector< int > &ind, vector< double > &val, double obj, double lb, double ub, string name, char type)\n"
    "    long GenModelCplex.AddSolverCol(vector< int > &ind, vector< double > &val, double obj, double lb, double ub, string name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_AddSolverRow(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  char arg5 ;
  string arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","AddSolverRow", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddSolverRow", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddSolverRow", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddSolverRow", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddSolverRow", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddSolverRow", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "char","AddSolverRow", 5, argv[3] ));
  } 
  arg5 = static_cast< char >(val5);
  {
    res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "string","AddSolverRow", 6, argv[4] )); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddSolverRow", 6, argv[4]));
    } else {
      arg6 = *(reinterpret_cast< string * >(argp6));
    }
  }
  {
    try {
      result = (long)(arg1)->AddSolverRow(*arg2,*arg3,arg4,arg5,arg6); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_AddCol__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  int *arg2 = (int *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  char arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  char val9 ;
  int ecode9 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","AddCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int *","AddCol", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","AddCol", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","AddCol", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","AddCol", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","AddCol", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  ecode9 = SWIG_AsVal_char(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "char","AddCol", 9, argv[7] ));
  } 
  arg9 = static_cast< char >(val9);
  {
    try {
      result = (long)(arg1)->AddCol(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_AddCol__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  int *arg2 = (int *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","AddCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int *","AddCol", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","AddCol", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","AddCol", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","AddCol", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","AddCol", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    try {
      result = (long)(arg1)->AddCol(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelCplex_AddCol(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_GenModelCplex_AddCol__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_char(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_GenModelCplex_AddCol__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "GenModelCplex.AddCol", 
    "    long GenModelCplex.AddCol(int *newi, double *newcol, int nz, double obj, double lb, double ub, char const *name, char type)\n"
    "    long GenModelCplex.AddCol(int *newi, double *newcol, int nz, double obj, double lb, double ub, char const *name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_AddCut(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  int *arg2 = (int *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  char arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  char val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","AddCut", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int *","AddCut", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","AddCut", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","AddCut", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddCut", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_char(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "char","AddCut", 6, argv[4] ));
  } 
  arg6 = static_cast< char >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","AddCut", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    try {
      result = (long)(arg1)->AddCut(arg2,arg3,arg4,arg5,arg6,(char const *)arg7); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_ChangeBulkBounds(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *arg4 = (char *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","ChangeBulkBounds", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ChangeBulkBounds", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "int *","ChangeBulkBounds", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char *","ChangeBulkBounds", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "double *","ChangeBulkBounds", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (long)(arg1)->ChangeBulkBounds(arg2,arg3,arg4,arg5); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_ChangeBulkObjectives(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","ChangeBulkObjectives", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ChangeBulkObjectives", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "int *","ChangeBulkObjectives", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "double *","ChangeBulkObjectives", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (long)(arg1)->ChangeBulkObjectives(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_ChangeBulkNz(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","ChangeBulkNz", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ChangeBulkNz", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "int *","ChangeBulkNz", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "int *","ChangeBulkNz", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "double *","ChangeBulkNz", 5, argv[3] )); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (long)(arg1)->ChangeBulkNz(arg2,arg3,arg4,arg5); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_WriteProblemToLpFile(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","WriteProblemToLpFile", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","WriteProblemToLpFile", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","WriteProblemToLpFile", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->WriteProblemToLpFile(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_WriteSolutionToFile(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","WriteSolutionToFile", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","WriteSolutionToFile", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","WriteSolutionToFile", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->WriteSolutionToFile(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_SwitchToMip(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","SwitchToMip", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (long)(arg1)->SwitchToMip(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_SwitchToLp(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","SwitchToLp", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (long)(arg1)->SwitchToLp(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_DeleteMipStarts(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","DeleteMipStarts", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (long)(arg1)->DeleteMipStarts(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_Solve(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (long)(arg1)->Solve(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_SetSol(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","SetSol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (long)(arg1)->SetSol(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_Clean(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","Clean", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (long)(arg1)->Clean(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_GetMIPRelativeGap(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","GetMIPRelativeGap", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    try {
      result = (double)(arg1)->GetMIPRelativeGap(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_SetDirectParam(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  int arg2 ;
  genmodel_param arg3 ;
  string arg4 ;
  string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","SetDirectParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetDirectParam", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_genmodel_param,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "genmodel_param","SetDirectParam", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "genmodel_param","SetDirectParam", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< genmodel_param * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","SetDirectParam", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetDirectParam", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "string","SetDirectParam", 5, argv[3] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetDirectParam", 5, argv[3]));
    } else {
      arg5 = *(reinterpret_cast< string * >(argp5));
    }
  }
  {
    try {
      result = (long)(arg1)->SetDirectParam(arg2,arg3,arg4,arg5); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_SetParam__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  int arg3 ;
  string arg4 ;
  string arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","SetParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetParam", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","SetParam", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "string","SetParam", 5, argv[3] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 5, argv[3]));
    } else {
      arg5 = *(reinterpret_cast< string * >(argp5));
    }
  }
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","SetParam", 6, argv[4] ));
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      result = (long)(arg1)->SetParam(arg2,arg3,arg4,arg5,arg6); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelCplex_SetParam__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelCplex *arg1 = (GenModelCplex *) 0 ;
  string arg2 ;
  int arg3 ;
  string arg4 ;
  string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelCplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelCplex *","SetParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelCplex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetParam", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","SetParam", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "string","SetParam", 5, argv[3] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 5, argv[3]));
    } else {
      arg5 = *(reinterpret_cast< string * >(argp5));
    }
  }
  {
    try {
      result = (long)(arg1)->SetParam(arg2,arg3,arg4,arg5); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelCplex_SetParam(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_string, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_string, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_GenModelCplex_SetParam__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelCplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_string, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_string, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_GenModelCplex_SetParam__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "GenModelCplex.SetParam", 
    "    long GenModelCplex.SetParam(string param, int whichparam, string type, string message, bool implemented)\n"
    "    long GenModelCplex.SetParam(string param, int whichparam, string type, string message)\n");
  
  return Qnil;
}


static swig_class SwigClassGenModelOsi;

SWIGINTERN void
free_GenModelOsi(GenModelOsi *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_GenModelOsi_Init(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","Init", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","Init", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","Init", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->Init(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_CreateModel__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    try {
      result = (long)(arg1)->CreateModel(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_CreateModel__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  int arg3 ;
  string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","CreateModel", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CreateModel", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","CreateModel", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    try {
      result = (long)(arg1)->CreateModel(arg2,arg3,arg4); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_CreateModel__SWIG_2(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","CreateModel", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","CreateModel", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (long)(arg1)->CreateModel(arg2,arg3); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_CreateModel__SWIG_3(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","CreateModel", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","CreateModel", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","CreateModel", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->CreateModel(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelOsi_CreateModel(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GenModelOsi_CreateModel__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GenModelOsi_CreateModel__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GenModelOsi_CreateModel__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_string, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GenModelOsi_CreateModel__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "GenModelOsi.CreateModel", 
    "    long GenModelOsi.CreateModel()\n"
    "    long GenModelOsi.CreateModel(string filename, int type, string dn)\n"
    "    long GenModelOsi.CreateModel(string filename, int type)\n"
    "    long GenModelOsi.CreateModel(string filename)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_AddSolverRow(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  char arg5 ;
  string arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","AddSolverRow", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddSolverRow", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddSolverRow", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddSolverRow", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddSolverRow", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddSolverRow", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "char","AddSolverRow", 5, argv[3] ));
  } 
  arg5 = static_cast< char >(val5);
  {
    res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "string","AddSolverRow", 6, argv[4] )); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddSolverRow", 6, argv[4]));
    } else {
      arg6 = *(reinterpret_cast< string * >(argp6));
    }
  }
  {
    try {
      result = (long)(arg1)->AddSolverRow(*arg2,*arg3,arg4,arg5,arg6); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_AddSolverCol__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  string arg7 ;
  char arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  char val8 ;
  int ecode8 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","AddSolverCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddSolverCol", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddSolverCol", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddSolverCol", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddSolverCol", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddSolverCol", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddSolverCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddSolverCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  {
    res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "string","AddSolverCol", 7, argv[5] )); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddSolverCol", 7, argv[5]));
    } else {
      arg7 = *(reinterpret_cast< string * >(argp7));
    }
  }
  ecode8 = SWIG_AsVal_char(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), Ruby_Format_TypeError( "", "char","AddSolverCol", 8, argv[6] ));
  } 
  arg8 = static_cast< char >(val8);
  {
    try {
      result = (long)(arg1)->AddSolverCol(*arg2,*arg3,arg4,arg5,arg6,arg7,arg8); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_AddSolverCol__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  vector< int > *arg2 = 0 ;
  vector< double > *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  string arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","AddSolverCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "vector< int > &","AddSolverCol", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< int > &","AddSolverCol", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< vector< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_vectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "vector< double > &","AddSolverCol", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "vector< double > &","AddSolverCol", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< vector< double > * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","AddSolverCol", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddSolverCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddSolverCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  {
    res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "string","AddSolverCol", 7, argv[5] )); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","AddSolverCol", 7, argv[5]));
    } else {
      arg7 = *(reinterpret_cast< string * >(argp7));
    }
  }
  {
    try {
      result = (long)(arg1)->AddSolverCol(*arg2,*arg3,arg4,arg5,arg6,arg7); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelOsi_AddSolverCol(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_vectorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_string, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_GenModelOsi_AddSolverCol__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_vectorT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_string, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_GenModelOsi_AddSolverCol__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 9, "GenModelOsi.AddSolverCol", 
    "    long GenModelOsi.AddSolverCol(vector< int > &ind, vector< double > &val, double obj, double lb, double ub, string name, char type)\n"
    "    long GenModelOsi.AddSolverCol(vector< int > &ind, vector< double > &val, double obj, double lb, double ub, string name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_AddCut(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  int *arg2 = (int *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  char arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  char val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","AddCut", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int *","AddCut", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","AddCut", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","AddCut", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddCut", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_char(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "char","AddCut", 6, argv[4] ));
  } 
  arg6 = static_cast< char >(val6);
  res7 = SWIG_AsCharPtrAndSize(argv[5], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), Ruby_Format_TypeError( "", "char const *","AddCut", 7, argv[5] ));
  }
  arg7 = reinterpret_cast< char * >(buf7);
  {
    try {
      result = (long)(arg1)->AddCut(arg2,arg3,arg4,arg5,arg6,(char const *)arg7); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return vresult;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_AddCol__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  int *arg2 = (int *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  char arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  char val9 ;
  int ecode9 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","AddCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int *","AddCol", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","AddCol", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","AddCol", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","AddCol", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","AddCol", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  ecode9 = SWIG_AsVal_char(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), Ruby_Format_TypeError( "", "char","AddCol", 9, argv[7] ));
  } 
  arg9 = static_cast< char >(val9);
  {
    try {
      result = (long)(arg1)->AddCol(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_AddCol__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  int *arg2 = (int *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","AddCol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "int *","AddCol", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "double *","AddCol", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","AddCol", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "double","AddCol", 5, argv[3] ));
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "double","AddCol", 6, argv[4] ));
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "double","AddCol", 7, argv[5] ));
  } 
  arg7 = static_cast< double >(val7);
  res8 = SWIG_AsCharPtrAndSize(argv[6], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), Ruby_Format_TypeError( "", "char const *","AddCol", 8, argv[6] ));
  }
  arg8 = reinterpret_cast< char * >(buf8);
  {
    try {
      result = (long)(arg1)->AddCol(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return vresult;
fail:
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelOsi_AddCol(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[10];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 10) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_GenModelOsi_AddCol__SWIG_1(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_char(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_GenModelOsi_AddCol__SWIG_0(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 10, "GenModelOsi.AddCol", 
    "    long GenModelOsi.AddCol(int *newi, double *newcol, int nz, double obj, double lb, double ub, char const *name, char type)\n"
    "    long GenModelOsi.AddCol(int *newi, double *newcol, int nz, double obj, double lb, double ub, char const *name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_WriteProblemToLpFile(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","WriteProblemToLpFile", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","WriteProblemToLpFile", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","WriteProblemToLpFile", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->WriteProblemToLpFile(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_WriteSolutionToFile(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","WriteSolutionToFile", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","WriteSolutionToFile", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","WriteSolutionToFile", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  {
    try {
      result = (long)(arg1)->WriteSolutionToFile(arg2); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_Solve(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    try {
      result = (long)(arg1)->Solve(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_SetSol(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","SetSol", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    try {
      result = (long)(arg1)->SetSol(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_Clean(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","Clean", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    try {
      result = (long)(arg1)->Clean(); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_SetDirectParam(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  int arg2 ;
  genmodel_param arg3 ;
  string arg4 ;
  string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","SetDirectParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetDirectParam", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_genmodel_param,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "genmodel_param","SetDirectParam", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "genmodel_param","SetDirectParam", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< genmodel_param * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","SetDirectParam", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetDirectParam", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "string","SetDirectParam", 5, argv[3] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetDirectParam", 5, argv[3]));
    } else {
      arg5 = *(reinterpret_cast< string * >(argp5));
    }
  }
  {
    try {
      result = (long)(arg1)->SetDirectParam(arg2,arg3,arg4,arg5); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_SetParam__SWIG_0(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  int arg3 ;
  string arg4 ;
  string arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","SetParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetParam", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","SetParam", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "string","SetParam", 5, argv[3] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 5, argv[3]));
    } else {
      arg5 = *(reinterpret_cast< string * >(argp5));
    }
  }
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "bool","SetParam", 6, argv[4] ));
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      result = (long)(arg1)->SetParam(arg2,arg3,arg4,arg5,arg6); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GenModelOsi_SetParam__SWIG_1(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *arg1 = (GenModelOsi *) 0 ;
  string arg2 ;
  int arg3 ;
  string arg4 ;
  string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  long result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GenModelOsi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "GenModelOsi *","SetParam", 1, self )); 
  }
  arg1 = reinterpret_cast< GenModelOsi * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","SetParam", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","SetParam", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "string","SetParam", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< string * >(argp4));
    }
  }
  {
    res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "string","SetParam", 5, argv[3] )); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","SetParam", 5, argv[3]));
    } else {
      arg5 = *(reinterpret_cast< string * >(argp5));
    }
  }
  {
    try {
      result = (long)(arg1)->SetParam(arg2,arg3,arg4,arg5); 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_GenModelOsi_SetParam(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_string, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_string, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_GenModelOsi_SetParam__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GenModelOsi, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_string, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_string, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_GenModelOsi_SetParam__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "GenModelOsi.SetParam", 
    "    long GenModelOsi.SetParam(string param, int whichparam, string type, string message, bool implemented)\n"
    "    long GenModelOsi.SetParam(string param, int whichparam, string type, string message)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_GenModelOsi_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_GenModelOsi_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GenModelOsi);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_GenModelOsi(int argc, VALUE *argv, VALUE self) {
  GenModelOsi *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (GenModelOsi *)new GenModelOsi();
      DATA_PTR(self) = result; 
    }
    catch(string str) {
      SWIG_exception(SWIG_RuntimeError,str.c_str()); 
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception"); 
    }
  }
  return self;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GenModelCplexTo_p_GenModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GenModel *)  ((GenModelCplex *) x));
}
static void *_p_GenModelOsiTo_p_GenModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GenModel *)  ((GenModelOsi *) x));
}
static swig_type_info _swigt__p_GenModel = {"_p_GenModel", "GenModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GenModelCplex = {"_p_GenModelCplex", "GenModelCplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GenModelOsi = {"_p_GenModelOsi", "GenModelOsi *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InterfaceVectorT_double_t = {"_p_InterfaceVectorT_double_t", "InterfaceVector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InterfaceVectorT_int_t = {"_p_InterfaceVectorT_int_t", "InterfaceVector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InterfaceVectorT_long_t = {"_p_InterfaceVectorT_long_t", "InterfaceVector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ModVars = {"_p_ModVars", "ModVars *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_genmodel_param = {"_p_genmodel_param", "genmodel_param *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_string_bool_t = {"_p_mapT_string_bool_t", "map< string,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_string_double_t = {"_p_mapT_string_double_t", "map< string,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_string_long_t = {"_p_mapT_string_long_t", "map< string,long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_string_string_t = {"_p_mapT_string_string_t", "map< string,string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_ModConsts_t = {"_p_vectorT_ModConsts_t", "vector< ModConsts > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_double_t = {"_p_vectorT_double_t", "vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_int_t = {"_p_vectorT_int_t", "vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GenModel,
  &_swigt__p_GenModelCplex,
  &_swigt__p_GenModelOsi,
  &_swigt__p_InterfaceVectorT_double_t,
  &_swigt__p_InterfaceVectorT_int_t,
  &_swigt__p_InterfaceVectorT_long_t,
  &_swigt__p_ModVars,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_genmodel_param,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_mapT_string_bool_t,
  &_swigt__p_mapT_string_double_t,
  &_swigt__p_mapT_string_long_t,
  &_swigt__p_mapT_string_string_t,
  &_swigt__p_string,
  &_swigt__p_vectorT_ModConsts_t,
  &_swigt__p_vectorT_double_t,
  &_swigt__p_vectorT_int_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_GenModel[] = {  {&_swigt__p_GenModelCplex, _p_GenModelCplexTo_p_GenModel, 0, 0},  {&_swigt__p_GenModel, 0, 0, 0},  {&_swigt__p_GenModelOsi, _p_GenModelOsiTo_p_GenModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GenModelCplex[] = {  {&_swigt__p_GenModelCplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GenModelOsi[] = {  {&_swigt__p_GenModelOsi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InterfaceVectorT_double_t[] = {  {&_swigt__p_InterfaceVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InterfaceVectorT_int_t[] = {  {&_swigt__p_InterfaceVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InterfaceVectorT_long_t[] = {  {&_swigt__p_InterfaceVectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ModVars[] = {  {&_swigt__p_ModVars, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_genmodel_param[] = {  {&_swigt__p_genmodel_param, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_string_bool_t[] = {  {&_swigt__p_mapT_string_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_string_double_t[] = {  {&_swigt__p_mapT_string_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_string_long_t[] = {  {&_swigt__p_mapT_string_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_string_string_t[] = {  {&_swigt__p_mapT_string_string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_ModConsts_t[] = {  {&_swigt__p_vectorT_ModConsts_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_double_t[] = {  {&_swigt__p_vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_int_t[] = {  {&_swigt__p_vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GenModel,
  _swigc__p_GenModelCplex,
  _swigc__p_GenModelOsi,
  _swigc__p_InterfaceVectorT_double_t,
  _swigc__p_InterfaceVectorT_int_t,
  _swigc__p_InterfaceVectorT_long_t,
  _swigc__p_ModVars,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_genmodel_param,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_mapT_string_bool_t,
  _swigc__p_mapT_string_double_t,
  _swigc__p_mapT_string_long_t,
  _swigc__p_mapT_string_string_t,
  _swigc__p_string,
  _swigc__p_vectorT_ModConsts_t,
  _swigc__p_vectorT_double_t,
  _swigc__p_vectorT_int_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_Genmodel(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mGenmodel = rb_define_module("Genmodel");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassIntVector.klass = rb_define_class_under(mGenmodel, "IntVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_InterfaceVectorT_int_t, (void *) &SwigClassIntVector);
  rb_define_alloc_func(SwigClassIntVector.klass, _wrap_IntVector_allocate);
  rb_define_method(SwigClassIntVector.klass, "initialize", VALUEFUNC(_wrap_new_IntVector), -1);
  rb_define_method(SwigClassIntVector.klass, "SetSize", VALUEFUNC(_wrap_IntVector_SetSize), -1);
  rb_define_method(SwigClassIntVector.klass, "Delete", VALUEFUNC(_wrap_IntVector_Delete), -1);
  rb_define_method(SwigClassIntVector.klass, "Set", VALUEFUNC(_wrap_IntVector_Set), -1);
  rb_define_method(SwigClassIntVector.klass, "Get", VALUEFUNC(_wrap_IntVector_Get), -1);
  rb_define_method(SwigClassIntVector.klass, "Ptr", VALUEFUNC(_wrap_IntVector_Ptr), -1);
  SwigClassIntVector.mark = 0;
  SwigClassIntVector.destroy = (void (*)(void *)) free_InterfaceVector_Sl_int_Sg_;
  SwigClassIntVector.trackObjects = 0;
  
  SwigClassLongVector.klass = rb_define_class_under(mGenmodel, "LongVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_InterfaceVectorT_long_t, (void *) &SwigClassLongVector);
  rb_define_alloc_func(SwigClassLongVector.klass, _wrap_LongVector_allocate);
  rb_define_method(SwigClassLongVector.klass, "initialize", VALUEFUNC(_wrap_new_LongVector), -1);
  rb_define_method(SwigClassLongVector.klass, "SetSize", VALUEFUNC(_wrap_LongVector_SetSize), -1);
  rb_define_method(SwigClassLongVector.klass, "Delete", VALUEFUNC(_wrap_LongVector_Delete), -1);
  rb_define_method(SwigClassLongVector.klass, "Set", VALUEFUNC(_wrap_LongVector_Set), -1);
  rb_define_method(SwigClassLongVector.klass, "Get", VALUEFUNC(_wrap_LongVector_Get), -1);
  rb_define_method(SwigClassLongVector.klass, "Ptr", VALUEFUNC(_wrap_LongVector_Ptr), -1);
  SwigClassLongVector.mark = 0;
  SwigClassLongVector.destroy = (void (*)(void *)) free_InterfaceVector_Sl_long_Sg_;
  SwigClassLongVector.trackObjects = 0;
  
  SwigClassDoubleVector.klass = rb_define_class_under(mGenmodel, "DoubleVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_InterfaceVectorT_double_t, (void *) &SwigClassDoubleVector);
  rb_define_alloc_func(SwigClassDoubleVector.klass, _wrap_DoubleVector_allocate);
  rb_define_method(SwigClassDoubleVector.klass, "initialize", VALUEFUNC(_wrap_new_DoubleVector), -1);
  rb_define_method(SwigClassDoubleVector.klass, "SetSize", VALUEFUNC(_wrap_DoubleVector_SetSize), -1);
  rb_define_method(SwigClassDoubleVector.klass, "Delete", VALUEFUNC(_wrap_DoubleVector_Delete), -1);
  rb_define_method(SwigClassDoubleVector.klass, "Set", VALUEFUNC(_wrap_DoubleVector_Set), -1);
  rb_define_method(SwigClassDoubleVector.klass, "Get", VALUEFUNC(_wrap_DoubleVector_Get), -1);
  rb_define_method(SwigClassDoubleVector.klass, "Ptr", VALUEFUNC(_wrap_DoubleVector_Ptr), -1);
  SwigClassDoubleVector.mark = 0;
  SwigClassDoubleVector.destroy = (void (*)(void *)) free_InterfaceVector_Sl_double_Sg_;
  SwigClassDoubleVector.trackObjects = 0;
  
  SwigClassGenModel.klass = rb_define_class_under(mGenmodel, "GenModel", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_GenModel, (void *) &SwigClassGenModel);
  rb_undef_alloc_func(SwigClassGenModel.klass);
  rb_define_method(SwigClassGenModel.klass, "AddIndexToCoef", VALUEFUNC(_wrap_GenModel_AddIndexToCoef), -1);
  rb_define_method(SwigClassGenModel.klass, "AddCoef", VALUEFUNC(_wrap_GenModel_AddCoef), -1);
  rb_define_method(SwigClassGenModel.klass, "CoefIndex", VALUEFUNC(_wrap_GenModel_CoefIndex), -1);
  rb_define_method(SwigClassGenModel.klass, "AddConst", VALUEFUNC(_wrap_GenModel_AddConst), -1);
  rb_define_method(SwigClassGenModel.klass, "AddVar", VALUEFUNC(_wrap_GenModel_AddVar), -1);
  rb_define_method(SwigClassGenModel.klass, "AddVars", VALUEFUNC(_wrap_GenModel_AddVars), -1);
  rb_define_method(SwigClassGenModel.klass, "AddModelCol", VALUEFUNC(_wrap_GenModel_AddModelCol), -1);
  rb_define_method(SwigClassGenModel.klass, "AddModelRow", VALUEFUNC(_wrap_GenModel_AddModelRow), -1);
  rb_define_method(SwigClassGenModel.klass, "SetQpCoef", VALUEFUNC(_wrap_GenModel_SetQpCoef), -1);
  rb_define_method(SwigClassGenModel.klass, "AddNz", VALUEFUNC(_wrap_GenModel_AddNz), -1);
  rb_define_method(SwigClassGenModel.klass, "AddNzToLast", VALUEFUNC(_wrap_GenModel_AddNzToLast), -1);
  rb_define_method(SwigClassGenModel.klass, "SetNumbers", VALUEFUNC(_wrap_GenModel_SetNumbers), -1);
  rb_define_method(SwigClassGenModel.klass, "ClearStructure", VALUEFUNC(_wrap_GenModel_ClearStructure), -1);
  rb_define_method(SwigClassGenModel.klass, "PrintModel", VALUEFUNC(_wrap_GenModel_PrintModel), -1);
  rb_define_method(SwigClassGenModel.klass, "PrintSol", VALUEFUNC(_wrap_GenModel_PrintSol), -1);
  rb_define_method(SwigClassGenModel.klass, "PrintSolNz", VALUEFUNC(_wrap_GenModel_PrintSolNz), -1);
  rb_define_method(SwigClassGenModel.klass, "PrintObjVal", VALUEFUNC(_wrap_GenModel_PrintObjVal), -1);
  rb_define_method(SwigClassGenModel.klass, "SetLongParam", VALUEFUNC(_wrap_GenModel_SetLongParam), -1);
  rb_define_method(SwigClassGenModel.klass, "SetDblParam", VALUEFUNC(_wrap_GenModel_SetDblParam), -1);
  rb_define_method(SwigClassGenModel.klass, "SetBoolParam", VALUEFUNC(_wrap_GenModel_SetBoolParam), -1);
  rb_define_method(SwigClassGenModel.klass, "SetStrParam", VALUEFUNC(_wrap_GenModel_SetStrParam), -1);
  rb_define_method(SwigClassGenModel.klass, "ThrowError", VALUEFUNC(_wrap_GenModel_ThrowError), -1);
  rb_define_method(SwigClassGenModel.klass, "Init", VALUEFUNC(_wrap_GenModel_Init), -1);
  rb_define_method(SwigClassGenModel.klass, "CreateModel", VALUEFUNC(_wrap_GenModel_CreateModel), -1);
  rb_define_method(SwigClassGenModel.klass, "Solve", VALUEFUNC(_wrap_GenModel_Solve), -1);
  rb_define_method(SwigClassGenModel.klass, "SetSol", VALUEFUNC(_wrap_GenModel_SetSol), -1);
  rb_define_method(SwigClassGenModel.klass, "ChangeBulkBounds", VALUEFUNC(_wrap_GenModel_ChangeBulkBounds), -1);
  rb_define_method(SwigClassGenModel.klass, "WriteProblemToLpFile", VALUEFUNC(_wrap_GenModel_WriteProblemToLpFile), -1);
  rb_define_method(SwigClassGenModel.klass, "WriteSolutionToFile", VALUEFUNC(_wrap_GenModel_WriteSolutionToFile), -1);
  rb_define_method(SwigClassGenModel.klass, "ChangeBulkObjectives", VALUEFUNC(_wrap_GenModel_ChangeBulkObjectives), -1);
  rb_define_method(SwigClassGenModel.klass, "DeleteMipStarts", VALUEFUNC(_wrap_GenModel_DeleteMipStarts), -1);
  rb_define_method(SwigClassGenModel.klass, "GetMIPRelativeGap", VALUEFUNC(_wrap_GenModel_GetMIPRelativeGap), -1);
  rb_define_method(SwigClassGenModel.klass, "FindConstraintMaxLhs", VALUEFUNC(_wrap_GenModel_FindConstraintMaxLhs), -1);
  rb_define_method(SwigClassGenModel.klass, "FindConstraintMinLhs", VALUEFUNC(_wrap_GenModel_FindConstraintMinLhs), -1);
  rb_define_method(SwigClassGenModel.klass, "MakeConstraintFeasible", VALUEFUNC(_wrap_GenModel_MakeConstraintFeasible), -1);
  rb_define_method(SwigClassGenModel.klass, "binit=", VALUEFUNC(_wrap_GenModel_binit_set), -1);
  rb_define_method(SwigClassGenModel.klass, "binit", VALUEFUNC(_wrap_GenModel_binit_get), -1);
  rb_define_method(SwigClassGenModel.klass, "bcreated=", VALUEFUNC(_wrap_GenModel_bcreated_set), -1);
  rb_define_method(SwigClassGenModel.klass, "bcreated", VALUEFUNC(_wrap_GenModel_bcreated_get), -1);
  rb_define_method(SwigClassGenModel.klass, "name=", VALUEFUNC(_wrap_GenModel_name_set), -1);
  rb_define_method(SwigClassGenModel.klass, "name", VALUEFUNC(_wrap_GenModel_name_get), -1);
  rb_define_method(SwigClassGenModel.klass, "consts=", VALUEFUNC(_wrap_GenModel_consts_set), -1);
  rb_define_method(SwigClassGenModel.klass, "consts", VALUEFUNC(_wrap_GenModel_consts_get), -1);
  rb_define_method(SwigClassGenModel.klass, "ci=", VALUEFUNC(_wrap_GenModel_ci_set), -1);
  rb_define_method(SwigClassGenModel.klass, "ci", VALUEFUNC(_wrap_GenModel_ci_get), -1);
  rb_define_method(SwigClassGenModel.klass, "nc=", VALUEFUNC(_wrap_GenModel_nc_set), -1);
  rb_define_method(SwigClassGenModel.klass, "nc", VALUEFUNC(_wrap_GenModel_nc_get), -1);
  rb_define_method(SwigClassGenModel.klass, "nr=", VALUEFUNC(_wrap_GenModel_nr_set), -1);
  rb_define_method(SwigClassGenModel.klass, "nr", VALUEFUNC(_wrap_GenModel_nr_get), -1);
  rb_define_method(SwigClassGenModel.klass, "nz=", VALUEFUNC(_wrap_GenModel_nz_set), -1);
  rb_define_method(SwigClassGenModel.klass, "nz", VALUEFUNC(_wrap_GenModel_nz_get), -1);
  rb_define_method(SwigClassGenModel.klass, "vars=", VALUEFUNC(_wrap_GenModel_vars_set), -1);
  rb_define_method(SwigClassGenModel.klass, "vars", VALUEFUNC(_wrap_GenModel_vars_get), -1);
  rb_define_method(SwigClassGenModel.klass, "version=", VALUEFUNC(_wrap_GenModel_version_set), -1);
  rb_define_method(SwigClassGenModel.klass, "version", VALUEFUNC(_wrap_GenModel_version_get), -1);
  rb_define_method(SwigClassGenModel.klass, "objval=", VALUEFUNC(_wrap_GenModel_objval_set), -1);
  rb_define_method(SwigClassGenModel.klass, "objval", VALUEFUNC(_wrap_GenModel_objval_get), -1);
  rb_define_method(SwigClassGenModel.klass, "solstat=", VALUEFUNC(_wrap_GenModel_solstat_set), -1);
  rb_define_method(SwigClassGenModel.klass, "solstat", VALUEFUNC(_wrap_GenModel_solstat_get), -1);
  rb_define_method(SwigClassGenModel.klass, "feasible=", VALUEFUNC(_wrap_GenModel_feasible_set), -1);
  rb_define_method(SwigClassGenModel.klass, "feasible", VALUEFUNC(_wrap_GenModel_feasible_get), -1);
  rb_define_method(SwigClassGenModel.klass, "dualfeasible=", VALUEFUNC(_wrap_GenModel_dualfeasible_set), -1);
  rb_define_method(SwigClassGenModel.klass, "dualfeasible", VALUEFUNC(_wrap_GenModel_dualfeasible_get), -1);
  rb_define_method(SwigClassGenModel.klass, "hassolution=", VALUEFUNC(_wrap_GenModel_hassolution_set), -1);
  rb_define_method(SwigClassGenModel.klass, "hassolution", VALUEFUNC(_wrap_GenModel_hassolution_get), -1);
  rb_define_method(SwigClassGenModel.klass, "solverdata=", VALUEFUNC(_wrap_GenModel_solverdata_set), -1);
  rb_define_method(SwigClassGenModel.klass, "solverdata", VALUEFUNC(_wrap_GenModel_solverdata_get), -1);
  rb_define_method(SwigClassGenModel.klass, "longParam=", VALUEFUNC(_wrap_GenModel_longParam_set), -1);
  rb_define_method(SwigClassGenModel.klass, "longParam", VALUEFUNC(_wrap_GenModel_longParam_get), -1);
  rb_define_method(SwigClassGenModel.klass, "dblParam=", VALUEFUNC(_wrap_GenModel_dblParam_set), -1);
  rb_define_method(SwigClassGenModel.klass, "dblParam", VALUEFUNC(_wrap_GenModel_dblParam_get), -1);
  rb_define_method(SwigClassGenModel.klass, "boolParam=", VALUEFUNC(_wrap_GenModel_boolParam_set), -1);
  rb_define_method(SwigClassGenModel.klass, "boolParam", VALUEFUNC(_wrap_GenModel_boolParam_get), -1);
  rb_define_method(SwigClassGenModel.klass, "strParam=", VALUEFUNC(_wrap_GenModel_strParam_set), -1);
  rb_define_method(SwigClassGenModel.klass, "strParam", VALUEFUNC(_wrap_GenModel_strParam_get), -1);
  SwigClassGenModel.mark = 0;
  SwigClassGenModel.destroy = (void (*)(void *)) free_GenModel;
  SwigClassGenModel.trackObjects = 0;
  
  SwigClassGenModelCplex.klass = rb_define_class_under(mGenmodel, "GenModelCplex", ((swig_class *) SWIGTYPE_p_GenModel->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_GenModelCplex, (void *) &SwigClassGenModelCplex);
  rb_define_alloc_func(SwigClassGenModelCplex.klass, _wrap_GenModelCplex_allocate);
  rb_define_method(SwigClassGenModelCplex.klass, "initialize", VALUEFUNC(_wrap_new_GenModelCplex), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "Init", VALUEFUNC(_wrap_GenModelCplex_Init), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "CreateModel", VALUEFUNC(_wrap_GenModelCplex_CreateModel), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "AddSolverCol", VALUEFUNC(_wrap_GenModelCplex_AddSolverCol), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "AddSolverRow", VALUEFUNC(_wrap_GenModelCplex_AddSolverRow), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "AddCol", VALUEFUNC(_wrap_GenModelCplex_AddCol), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "AddCut", VALUEFUNC(_wrap_GenModelCplex_AddCut), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "ChangeBulkBounds", VALUEFUNC(_wrap_GenModelCplex_ChangeBulkBounds), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "ChangeBulkObjectives", VALUEFUNC(_wrap_GenModelCplex_ChangeBulkObjectives), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "ChangeBulkNz", VALUEFUNC(_wrap_GenModelCplex_ChangeBulkNz), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "WriteProblemToLpFile", VALUEFUNC(_wrap_GenModelCplex_WriteProblemToLpFile), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "WriteSolutionToFile", VALUEFUNC(_wrap_GenModelCplex_WriteSolutionToFile), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "SwitchToMip", VALUEFUNC(_wrap_GenModelCplex_SwitchToMip), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "SwitchToLp", VALUEFUNC(_wrap_GenModelCplex_SwitchToLp), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "DeleteMipStarts", VALUEFUNC(_wrap_GenModelCplex_DeleteMipStarts), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "Solve", VALUEFUNC(_wrap_GenModelCplex_Solve), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "SetSol", VALUEFUNC(_wrap_GenModelCplex_SetSol), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "Clean", VALUEFUNC(_wrap_GenModelCplex_Clean), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "GetMIPRelativeGap", VALUEFUNC(_wrap_GenModelCplex_GetMIPRelativeGap), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "SetDirectParam", VALUEFUNC(_wrap_GenModelCplex_SetDirectParam), -1);
  rb_define_method(SwigClassGenModelCplex.klass, "SetParam", VALUEFUNC(_wrap_GenModelCplex_SetParam), -1);
  SwigClassGenModelCplex.mark = 0;
  SwigClassGenModelCplex.destroy = (void (*)(void *)) free_GenModelCplex;
  SwigClassGenModelCplex.trackObjects = 0;
  
  SwigClassGenModelOsi.klass = rb_define_class_under(mGenmodel, "GenModelOsi", ((swig_class *) SWIGTYPE_p_GenModel->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_GenModelOsi, (void *) &SwigClassGenModelOsi);
  rb_define_alloc_func(SwigClassGenModelOsi.klass, _wrap_GenModelOsi_allocate);
  rb_define_method(SwigClassGenModelOsi.klass, "initialize", VALUEFUNC(_wrap_new_GenModelOsi), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "Init", VALUEFUNC(_wrap_GenModelOsi_Init), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "CreateModel", VALUEFUNC(_wrap_GenModelOsi_CreateModel), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "AddSolverRow", VALUEFUNC(_wrap_GenModelOsi_AddSolverRow), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "AddSolverCol", VALUEFUNC(_wrap_GenModelOsi_AddSolverCol), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "AddCut", VALUEFUNC(_wrap_GenModelOsi_AddCut), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "AddCol", VALUEFUNC(_wrap_GenModelOsi_AddCol), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "WriteProblemToLpFile", VALUEFUNC(_wrap_GenModelOsi_WriteProblemToLpFile), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "WriteSolutionToFile", VALUEFUNC(_wrap_GenModelOsi_WriteSolutionToFile), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "Solve", VALUEFUNC(_wrap_GenModelOsi_Solve), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "SetSol", VALUEFUNC(_wrap_GenModelOsi_SetSol), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "Clean", VALUEFUNC(_wrap_GenModelOsi_Clean), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "SetDirectParam", VALUEFUNC(_wrap_GenModelOsi_SetDirectParam), -1);
  rb_define_method(SwigClassGenModelOsi.klass, "SetParam", VALUEFUNC(_wrap_GenModelOsi_SetParam), -1);
  SwigClassGenModelOsi.mark = 0;
  SwigClassGenModelOsi.destroy = (void (*)(void *)) free_GenModelOsi;
  SwigClassGenModelOsi.trackObjects = 0;
}

